import React from 'react'
import defer from 'lodash/defer'

export default function Defer(props) {
  return props.children(defer(props.func, props.args))
}

Defer.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.defer",
  "longname": "_.defer",
  "name": "defer",
  "kind": "member",
  "scope": "static",
  "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to defer.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The arguments to invoke `func` with.",
      "name": "args"
    }
  ],
  "examples": [
    "_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond."
  ],
  "returns": [
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "description": "Returns the timer id."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 22,
    "filename": "defer.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 42
}
    */