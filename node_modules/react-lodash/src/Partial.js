import React from 'react'
import partial from 'lodash/partial'

export default function Partial(props) {
  return props.children(partial(props.func, props.partials))
}

Partial.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.partial",
  "longname": "_.partial",
  "name": "partial",
  "kind": "member",
  "scope": "static",
  "description": "Creates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `_.bind` except it does **not**\nalter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to partially apply arguments to.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The arguments to be partially applied.",
      "name": "partials"
    }
  ],
  "examples": [
    "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new partially applied function."
    }
  ],
  "since": "0.2.0",
  "category": "Function",
  "meta": {
    "lineno": 42,
    "filename": "partial.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 115
}
    */