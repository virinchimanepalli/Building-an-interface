import React from 'react'
import mergeWith from 'lodash/mergeWith'

export default function MergeWith(props) {
  return props.children(mergeWith(props.object, props.sources, props.customizer))
}

MergeWith.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.mergeWith",
  "longname": "_.mergeWith",
  "name": "mergeWith",
  "kind": "member",
  "scope": "static",
  "description": "This method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "The destination object.",
      "name": "object"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "variable": true,
      "description": "The source objects.",
      "name": "sources"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to customize assigned values.",
      "name": "customizer"
    }
  ],
  "examples": [
    "function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "Returns `object`."
    }
  ],
  "since": "4.0.0",
  "category": "Object",
  "meta": {
    "lineno": 35,
    "filename": "mergeWith.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 98
}
    */