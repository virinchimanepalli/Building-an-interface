import React from 'react'
import partialRight from 'lodash/partialRight'

export default function PartialRight(props) {
  return props.children(partialRight(props.func, props.partials))
}

PartialRight.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.partialRight",
  "longname": "_.partialRight",
  "name": "partialRight",
  "kind": "member",
  "scope": "static",
  "description": "This method is like `_.partial` except that partially applied arguments\nare appended to the arguments it receives.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to partially apply arguments to.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The arguments to be partially applied.",
      "name": "partials"
    }
  ],
  "examples": [
    "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new partially applied function."
    }
  ],
  "since": "1.0.0",
  "category": "Function",
  "meta": {
    "lineno": 41,
    "filename": "partialRight.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 117
}
    */