import React from 'react'
import after from 'lodash/after'

export default function After(props) {
  return props.children(after(props.n, props.func))
}

After.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.after",
  "longname": "_.after",
  "name": "after",
  "kind": "function",
  "scope": "static",
  "description": "The opposite of `_.before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "description": "The number of calls before `func` is invoked.",
      "name": "n"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to restrict.",
      "name": "func"
    }
  ],
  "examples": [
    "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed."
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new restricted function."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 30,
    "filename": "after.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 1
}
    */