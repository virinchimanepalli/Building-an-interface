import React from 'react'
import rest from 'lodash/rest'

export default function Rest(props) {
  return props.children(rest(props.func, props.start))
}

Rest.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.rest",
  "longname": "_.rest",
  "name": "rest",
  "kind": "function",
  "scope": "static",
  "description": "Creates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to apply a rest parameter to.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "optional": true,
      "defaultvalue": "func.length-1",
      "description": "The start position of the rest parameter.",
      "name": "start"
    }
  ],
  "examples": [
    "var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new function."
    }
  ],
  "since": "4.0.0",
  "category": "Function",
  "meta": {
    "lineno": 32,
    "filename": "rest.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 135
}
    */