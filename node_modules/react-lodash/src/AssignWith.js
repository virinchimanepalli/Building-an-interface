import React from 'react'
import assignWith from 'lodash/assignWith'

export default function AssignWith(props) {
  return props.children(assignWith(props.object, props.sources, props.customizer))
}

AssignWith.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.assignWith",
  "longname": "_.assignWith",
  "name": "assignWith",
  "kind": "member",
  "scope": "static",
  "description": "This method is like `_.assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "The destination object.",
      "name": "object"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "variable": true,
      "description": "The source objects.",
      "name": "sources"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "optional": true,
      "description": "The function to customize assigned values.",
      "name": "customizer"
    }
  ],
  "examples": [
    "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "Returns `object`."
    }
  ],
  "since": "4.0.0",
  "category": "Object",
  "see": [
    "_.assignInWith"
  ],
  "meta": {
    "lineno": 33,
    "filename": "assignWith.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 9
}
    */