import React from 'react'
import attempt from 'lodash/attempt'

export default function Attempt(props) {
  return props.children(attempt(props.func, props.args))
}

Attempt.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.attempt",
  "longname": "_.attempt",
  "name": "attempt",
  "kind": "member",
  "scope": "static",
  "description": "Attempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to attempt.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The arguments to invoke `func` with.",
      "name": "args"
    }
  ],
  "examples": [
    "// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (_.isError(elements)) {\n  elements = [];\n}"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "Returns the `func` result or error object."
    }
  ],
  "since": "3.0.0",
  "category": "Util",
  "meta": {
    "lineno": 27,
    "filename": "attempt.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 192
}
    */