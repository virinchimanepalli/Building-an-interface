import React from 'react'
import findKey from 'lodash/findKey'

export default function FindKey(props) {
  return props.children(findKey(props.object, props.predicate))
}

FindKey.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.findKey",
  "longname": "_.findKey",
  "name": "findKey",
  "kind": "function",
  "scope": "static",
  "description": "This method is like `_.find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "The object to inspect.",
      "name": "object"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "optional": true,
      "defaultvalue": "_.identity",
      "description": "The function invoked per iteration.",
      "name": "predicate"
    }
  ],
  "examples": [
    "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "string",
          "undefined"
        ]
      },
      "description": "Returns the key of the matched element,\n else `undefined`."
    }
  ],
  "since": "1.1.0",
  "category": "Object",
  "meta": {
    "lineno": 40,
    "filename": "findKey.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 222
}
    */