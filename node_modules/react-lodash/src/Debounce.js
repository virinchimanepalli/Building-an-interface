import React from 'react'
import debounce from 'lodash/debounce'

export default function Debounce(props) {
  return props.children(debounce(props.func, props.wait, props.options, props.options.leading, props.options.maxWait, props.options.trailing))
}

Debounce.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.debounce",
  "longname": "_.debounce",
  "name": "debounce",
  "kind": "function",
  "scope": "static",
  "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked. The debounced function comes with a `cancel` method to cancel\ndelayed `func` invocations and a `flush` method to immediately invoke them.\nProvide `options` to indicate whether `func` should be invoked on the\nleading and/or trailing edge of the `wait` timeout. The `func` is invoked\nwith the last arguments provided to the debounced function. Subsequent\ncalls to the debounced function return the result of the last `func`\ninvocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the debounced function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.debounce` and `_.throttle`.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to debounce.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "optional": true,
      "defaultvalue": 0,
      "description": "The number of milliseconds to delay.",
      "name": "wait"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "optional": true,
      "defaultvalue": "{}",
      "description": "The options object.",
      "name": "options"
    },
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "optional": true,
      "defaultvalue": false,
      "description": "Specify invoking on the leading edge of the timeout.",
      "name": "options.leading"
    },
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "optional": true,
      "description": "The maximum time `func` is allowed to be delayed before it's invoked.",
      "name": "options.maxWait"
    },
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "optional": true,
      "defaultvalue": true,
      "description": "Specify invoking on the trailing edge of the timeout.",
      "name": "options.trailing"
    }
  ],
  "examples": [
    "// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new debounced function."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 66,
    "filename": "debounce.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 37
}
    */