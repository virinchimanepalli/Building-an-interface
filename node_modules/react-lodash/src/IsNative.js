import React from 'react'
import isNative from 'lodash/isNative'

export default function IsNative(props) {
  const value = isNative(props.value)
  return value ? props.yes() : props.no()
}

IsNative.defaultProps = {
  yes: () => {},
  no: () => {}
}
  
    /* Used for debugging
    {
  "id": "_.isNative",
  "longname": "_.isNative",
  "name": "isNative",
  "kind": "function",
  "scope": "static",
  "description": "Checks if `value` is a pristine native function.\n\n**Note:** This method can't reliably detect native functions in the presence\nof the core-js package because core-js circumvents this kind of detection.\nDespite multiple requests, the core-js maintainer has made it clear: any\nattempt to fix the detection will be obstructed. As a result, we're left\nwith little choice but to throw an error. Unfortunately, this also affects\npackages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\nwhich rely on core-js.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The value to check.",
      "name": "value"
    }
  ],
  "examples": [
    "_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "description": "Returns `true` if `value` is a native function,\n else `false`."
    }
  ],
  "since": "3.0.0",
  "category": "Lang",
  "meta": {
    "lineno": 33,
    "filename": "isNative.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 280
}
    */