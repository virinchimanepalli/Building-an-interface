import React from 'react'
import wrap from 'lodash/wrap'

export default function Wrap(props) {
  return props.children(wrap(props.value, props.wrapper))
}

Wrap.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.wrap",
  "longname": "_.wrap",
  "name": "wrap",
  "kind": "function",
  "scope": "static",
  "description": "Creates a function that provides `value` to `wrapper` as its first\nargument. Any additional arguments provided to the function are appended\nto those provided to the `wrapper`. The wrapper is invoked with the `this`\nbinding of the created function.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The value to wrap.",
      "name": "value"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "optional": true,
      "defaultvalue": "identity",
      "description": "The wrapper function.",
      "name": "wrapper"
    }
  ],
  "examples": [
    "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new function."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 26,
    "filename": "wrap.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 183
}
    */