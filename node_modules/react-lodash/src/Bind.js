import React from 'react'
import bind from 'lodash/bind'

export default function Bind(props) {
  return props.children(bind(props.func, props.thisArg, props.partials))
}

Bind.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.bind",
  "longname": "_.bind",
  "name": "bind",
  "kind": "member",
  "scope": "static",
  "description": "Creates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\nproperty of bound functions.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to bind.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The `this` binding of `func`.",
      "name": "thisArg"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The arguments to be partially applied.",
      "name": "partials"
    }
  ],
  "examples": [
    "function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new bound function."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 45,
    "filename": "bind.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 14
}
    */