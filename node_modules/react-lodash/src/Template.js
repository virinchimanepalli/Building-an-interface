import React from 'react'
import template from 'lodash/template'

export default function Template(props) {
  return props.children(template(props.string, props.options, props.options.escape, props.options.evaluate, props.options.imports, props.options.interpolate, props.options.sourceURL, props.options.variable))
}

Template.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.template",
  "longname": "_.template",
  "name": "template",
  "kind": "function",
  "scope": "static",
  "description": "Creates a compiled template function that can interpolate data properties\nin \"interpolate\" delimiters, HTML-escape interpolated data properties in\n\"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\nproperties may be accessed as free variables in the template. If a setting\nobject is given, it takes precedence over `_.templateSettings` values.\n\n**Note:** In the development build `_.template` utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\nfor easier debugging.\n\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "string"
        ]
      },
      "optional": true,
      "defaultvalue": "''",
      "description": "The template string.",
      "name": "string"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "optional": true,
      "defaultvalue": "{}",
      "description": "The options object.",
      "name": "options"
    },
    {
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "optional": true,
      "defaultvalue": "_.templateSettings.escape",
      "description": "The HTML \"escape\" delimiter.",
      "name": "options.escape"
    },
    {
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "optional": true,
      "defaultvalue": "_.templateSettings.evaluate",
      "description": "The \"evaluate\" delimiter.",
      "name": "options.evaluate"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "optional": true,
      "defaultvalue": "_.templateSettings.imports",
      "description": "An object to import into the template as free variables.",
      "name": "options.imports"
    },
    {
      "type": {
        "names": [
          "RegExp"
        ]
      },
      "optional": true,
      "defaultvalue": "_.templateSettings.interpolate",
      "description": "The \"interpolate\" delimiter.",
      "name": "options.interpolate"
    },
    {
      "type": {
        "names": [
          "string"
        ]
      },
      "optional": true,
      "defaultvalue": "'templateSources[n]'",
      "description": "The sourceURL of the compiled template.",
      "name": "options.sourceURL"
    },
    {
      "type": {
        "names": [
          "string"
        ]
      },
      "optional": true,
      "defaultvalue": "'obj'",
      "description": "The data object variable name.",
      "name": "options.variable"
    }
  ],
  "examples": [
    "// Use the \"interpolate\" delimiter to create a compiled template.\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// Use the HTML \"escape\" delimiter to escape data property values.\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the internal `print` function in \"evaluate\" delimiters.\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// Use the ES template literal delimiter as an \"interpolate\" delimiter.\n// Disable support by replacing the \"interpolate\" delimiter.\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// Use backslashes to treat delimiters as plain text.\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n\n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n\n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the compiled template function."
    }
  ],
  "since": "0.1.0",
  "category": "String",
  "customTags": [
    {
      "tag": "param-",
      "value": "{Object} [guard] Enables use as an iteratee for methods like `_.map`."
    }
  ],
  "meta": {
    "lineno": 134,
    "filename": "template.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 364
}
    */