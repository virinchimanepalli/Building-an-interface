import React from 'react'
import isEqualWith from 'lodash/isEqualWith'

export default function IsEqualWith(props) {
  const value = isEqualWith(props.value, props.other, props.customizer)
  return value ? props.yes() : props.no()
}

IsEqualWith.defaultProps = {
  yes: () => {},
  no: () => {}
}
  
    /* Used for debugging
    {
  "id": "_.isEqualWith",
  "longname": "_.isEqualWith",
  "name": "isEqualWith",
  "kind": "function",
  "scope": "static",
  "description": "This method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The value to compare.",
      "name": "value"
    },
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The other value to compare.",
      "name": "other"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "optional": true,
      "description": "The function to customize comparisons.",
      "name": "customizer"
    }
  ],
  "examples": [
    "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "description": "Returns `true` if the values are equivalent, else `false`."
    }
  ],
  "since": "4.0.0",
  "category": "Lang",
  "meta": {
    "lineno": 35,
    "filename": "isEqualWith.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 266
}
    */