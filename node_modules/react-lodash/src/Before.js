import React from 'react'
import before from 'lodash/before'

export default function Before(props) {
  return props.children(before(props.n, props.func))
}

Before.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.before",
  "longname": "_.before",
  "name": "before",
  "kind": "function",
  "scope": "static",
  "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "description": "The number of calls at which `func` is no longer invoked.",
      "name": "n"
    },
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to restrict.",
      "name": "func"
    }
  ],
  "examples": [
    "jQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list."
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new restricted function."
    }
  ],
  "since": "3.0.0",
  "category": "Function",
  "meta": {
    "lineno": 23,
    "filename": "before.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 12
}
    */