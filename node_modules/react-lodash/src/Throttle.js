import React from 'react'
import throttle from 'lodash/throttle'

export default function Throttle(props) {
  return props.children(throttle(props.func, props.wait, props.options, props.options.leading, props.options.trailing))
}

Throttle.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.throttle",
  "longname": "_.throttle",
  "name": "throttle",
  "kind": "function",
  "scope": "static",
  "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds. The throttled function comes with a `cancel`\nmethod to cancel delayed `func` invocations and a `flush` method to\nimmediately invoke them. Provide `options` to indicate whether `func`\nshould be invoked on the leading and/or trailing edge of the `wait`\ntimeout. The `func` is invoked with the last arguments provided to the\nthrottled function. Subsequent calls to the throttled function return the\nresult of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the throttled function\nis invoked more than once during the `wait` timeout.\n\nIf `wait` is `0` and `leading` is `false`, `func` invocation is deferred\nuntil to the next tick, similar to `setTimeout` with a timeout of `0`.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.throttle` and `_.debounce`.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "The function to throttle.",
      "name": "func"
    },
    {
      "type": {
        "names": [
          "number"
        ]
      },
      "optional": true,
      "defaultvalue": 0,
      "description": "The number of milliseconds to throttle invocations to.",
      "name": "wait"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "optional": true,
      "defaultvalue": "{}",
      "description": "The options object.",
      "name": "options"
    },
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "optional": true,
      "defaultvalue": true,
      "description": "Specify invoking on the leading edge of the timeout.",
      "name": "options.leading"
    },
    {
      "type": {
        "names": [
          "boolean"
        ]
      },
      "optional": true,
      "defaultvalue": true,
      "description": "Specify invoking on the trailing edge of the timeout.",
      "name": "options.trailing"
    }
  ],
  "examples": [
    "// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "function"
        ]
      },
      "description": "Returns the new throttled function."
    }
  ],
  "since": "0.1.0",
  "category": "Function",
  "meta": {
    "lineno": 51,
    "filename": "throttle.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 157
}
    */