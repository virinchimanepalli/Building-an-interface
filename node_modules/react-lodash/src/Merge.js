import React from 'react'
import merge from 'lodash/merge'

export default function Merge(props) {
  return props.children(merge(props.object, props.sources))
}

Merge.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.merge",
  "longname": "_.merge",
  "name": "merge",
  "kind": "member",
  "scope": "static",
  "description": "This method is like `_.assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "The destination object.",
      "name": "object"
    },
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "optional": true,
      "variable": true,
      "description": "The source objects.",
      "name": "sources"
    }
  ],
  "examples": [
    "var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "Object"
        ]
      },
      "description": "Returns `object`."
    }
  ],
  "since": "0.5.0",
  "category": "Object",
  "meta": {
    "lineno": 35,
    "filename": "merge.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 97
}
    */