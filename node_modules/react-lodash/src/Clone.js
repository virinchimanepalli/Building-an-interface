import React from 'react'
import clone from 'lodash/clone'

export default function Clone(props) {
  return props.children(clone(props.value))
}

Clone.defaultProps = {
  children: value => value
}
  
    /* Used for debugging
    {
  "id": "_.clone",
  "longname": "_.clone",
  "name": "clone",
  "kind": "function",
  "scope": "static",
  "description": "Creates a shallow clone of `value`.\n\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
  "memberof": "_",
  "params": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "The value to clone.",
      "name": "value"
    }
  ],
  "examples": [
    "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true"
  ],
  "returns": [
    {
      "type": {
        "names": [
          "*"
        ]
      },
      "description": "Returns the cloned value."
    }
  ],
  "since": "0.1.0",
  "category": "Lang",
  "see": [
    "_.cloneDeep"
  ],
  "meta": {
    "lineno": 32,
    "filename": "clone.js",
    "path": "D:\\code\\react-lodash\\node_modules\\lodash"
  },
  "order": 198
}
    */